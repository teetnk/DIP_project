const video = document.getElementById('cameraPreview');
const canvas = document.getElementById('canvas');
const photo = document.getElementById('photo');
const edgePhoto = document.getElementById('edgePhoto');
const captureButton = document.getElementById('capture');
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const resetButton = document.getElementById('resetButton');
const foodName = document.getElementById('foodName');
const confidence = document.getElementById('confidence');
const nutritionInfo = document.getElementById('nutritionInfo');
const nutritionTable = document.getElementById('nutritionTable');
const labelInput = document.getElementById('labelInput');
const submitLabel = document.getElementById('submitLabel');
const trainingStatus = document.getElementById('trainingStatus');
const foodHistory = document.getElementById('foodHistory');
const foodList = document.getElementById("food-list");
const newLabel = document.getElementById("newLabel");

// ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å localStorage
function loadHistory() {
    const history = JSON.parse(localStorage.getItem('foodHistory')) || [];
    foodHistory.innerHTML = '';
    history.forEach(item => {
        const li = document.createElement('li');
        const link = document.createElement('a');
        link.href = item.path; // ‡πÉ‡∏ä‡πâ saved_path ‡πÄ‡∏õ‡πá‡∏ô URL
        link.textContent = `${item.name} (${item.calories || '-'} kcal)`;
        link.target = '_blank'; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
        link.style.textDecoration = 'none'; // ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå
        link.style.color = '#2d5a50'; // ‡∏™‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏ó‡∏ô
        link.addEventListener('mouseover', () => {
            link.style.color = '#219653'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
        });
        link.addEventListener('mouseout', () => {
            link.style.color = '#2d5a50';
        });
        li.appendChild(link);
        foodHistory.appendChild(li);
    });
}

async function loadFoodList() {
    try {
        const response = await fetch("/food_list");
        const foodNames = await response.json();
        foodList.innerHTML = "";
        foodNames.forEach(food => {
            let option = document.createElement("option");
            option.value = food;
            foodList.appendChild(option);
        });
    } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£:", error);
    }
}

document.addEventListener("DOMContentLoaded", loadFoodList);

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô localStorage
function saveHistory(name, calories) {
    let history = JSON.parse(localStorage.getItem('foodHistory')) || [];
    history.unshift({ name, calories });
    if (history.length > 5) history.pop();
    localStorage.setItem('foodHistory', JSON.stringify(history));
    loadHistory();
}

// ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
captureButton.addEventListener('click', () => {
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext('2d').drawImage(video, 0, 0);
    const imageData = canvas.toDataURL('image/jpeg');
    photo.src = imageData;
    photo.style.display = 'block';
    sendImageToBackend(imageData);
});

// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
uploadButton.addEventListener('click', () => fileInput.click());
fileInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            photo.src = e.target.result;
            photo.style.display = 'block';
            sendImageToBackend(e.target.result);
        };
        reader.readAsDataURL(file);
    }
});

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
resetButton.addEventListener('click', () => {
    photo.style.display = 'none';
    edgePhoto.style.display = 'none';
    foodName.textContent = "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: -";
    confidence.textContent = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: -";
    nutritionInfo.style.display = 'none';
    labelInput.style.display = 'none';
    trainingStatus.style.display = 'none';
});

let savedPath = null;  // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

async function sendImageToBackend(imageData) {
    foodName.textContent = "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...";
    confidence.textContent = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: -";
    nutritionInfo.style.display = 'none';
    labelInput.style.display = 'none';
    edgePhoto.style.display = 'none';
    trainingStatus.style.display = 'none';

    try {
        const response = await fetch('/predict', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ image: imageData })
        });
        const data = await response.json();
        
        if (data.error) {
            foodName.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.error;
            confidence.textContent = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: -";
        } else {
            foodName.textContent = `‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${data.food_name}`;
            confidence.innerHTML = `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: <span class="${parseFloat(data.confidence) >= 70 ? 'confidence-green' : 'confidence-orange'}">${data.confidence}</span>`;

            edgePhoto.src = data.edge_image;
            edgePhoto.style.display = 'block';

            savedPath = data.saved_path;  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            console.log(`üìÇ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å savedPath: ${savedPath}`);
            nutritionInfo.style.display = 'block';
            while (nutritionTable.rows.length > 1) nutritionTable.deleteRow(1);
            if (data.nutrition && Object.keys(data.nutrition).length > 0) {
                const units = { calories: "kcal" };
                for (const [key, value] of Object.entries(data.nutrition)) {
                    if (key !== "ingredients") {
                        const row = nutritionTable.insertRow();
                        row.insertCell(0).textContent = key === "calories" ? "‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô" : key;
                        row.insertCell(1).textContent = `${value} ${units[key] || ''}`;
                    }
                }
                const row = nutritionTable.insertRow();
                row.insertCell(0).textContent = "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö";
                row.insertCell(1).textContent = data.nutrition.ingredients ? data.nutrition.ingredients.join(", ") : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
            } else {
                const row = nutritionTable.insertRow();
                row.insertCell(0).colSpan = 2;
                row.insertCell(0).textContent = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£";
            }

            saveHistory(data.food_name, data.nutrition.calories || null, savedPath); // ‡πÄ‡∏Å‡πá‡∏ö saved_path

            if (parseFloat(data.confidence) >= 70) {
                confirmFoodName(data.food_name, data.confidence);
            } else {
                labelInput.style.display = 'block';
            }

            if (data.needs_label) {
                alert(`‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô "${data.food_name}" ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
                labelInput.style.display = 'block';
            }
            submitLabel.onclick = async () => {
                const newLabelValue = newLabel.value.trim();  // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
                console.log(`üì§ ‡∏Ñ‡πà‡∏≤ input ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å index.html:`, newLabelValue);
            
                if (!newLabelValue) {
                    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
                    return;
                }
            
                if (!savedPath) {
                    alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà");
                    return;
                }
            
                console.log(`üì§ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ update_label: path=${savedPath}, label=${newLabelValue}`);
            
                try {
                    const labelResponse = await fetch('/update_label', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            path: savedPath,
                            label: newLabelValue
                        })
                    });
            
                    if (!labelResponse.ok) throw new Error('‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
                    const labelData = await labelResponse.json();
                    console.log(`‚úÖ ‡∏Ñ‡πà‡∏≤ response ‡∏à‡∏≤‡∏Å Flask:`, labelData);
            
                    alert(labelData.message);
                    trainingStatus.style.display = 'none';
                    labelInput.style.display = 'none';
            
                    setTimeout(() => {
                        alert("üéâ ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!");
                        location.reload();
                    }, 3000);
                } catch (error) {
                    alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
                    console.error("üö® ERROR:", error);
                }
            };            
        }
    } catch (error) {
        console.error("‚ùå ERROR:", error);
        foodName.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: " + error.message;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à >= 70%
function confirmFoodName(foodName, confidence) {
    const confirmationContainer = document.createElement("div");
    confirmationContainer.id = "confirmationContainer";
    confirmationContainer.innerHTML = `
        <p>üçõ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ "<strong>${foodName}</strong>" ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?</p>
        <button id="confirmYes" class="btn-confirm">‚úîÔ∏è ‡πÉ‡∏ä‡πà</button>
        <button id="confirmNo" class="btn-confirm">‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà</button>
    `;

    document.body.appendChild(confirmationContainer);

    document.getElementById("confirmYes").addEventListener("click", () => {
        document.body.removeChild(confirmationContainer);
        saveConfirmedFood(foodName);  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    });

    document.getElementById("confirmNo").addEventListener("click", () => {
        document.body.removeChild(confirmationContainer);
        showLabelInput();  // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡πÉ‡∏ä‡πà"
function saveConfirmedFood(foodName) {
    console.log(`‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "${foodName}"`);
    alert(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ${foodName} ‡πÅ‡∏•‡πâ‡∏ß!`);
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"
function showLabelInput() {
    document.getElementById("labelInput").style.display = "block"; // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
}


// ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
loadHistory();
